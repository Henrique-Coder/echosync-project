from PyQt6 import QtCore, QtGui, QtWidgets
from pathlib import Path
from requests import get
from music_tag import load_file as tag_load_file
from unicodedata import normalize
from youtubesearchpython import SearchVideos
from yt_dlp import YoutubeDL
from re import sub
from sys import argv, exit


class Ui_mainWindow(object):
    def setupUi(self, mainWindow):
        mainWindow.setObjectName('EchoSyncProject')
        mainWindow.resize(600, 410)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(mainWindow.sizePolicy().hasHeightForWidth())
        mainWindow.setSizePolicy(sizePolicy)
        mainWindow.setMinimumSize(QtCore.QSize(600, 410))
        mainWindow.setMaximumSize(QtCore.QSize(600, 410))
        font = QtGui.QFont()
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        mainWindow.setFont(font)
        mainWindow.setMouseTracking(True)
        mainWindow.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        mainWindow.setAcceptDrops(False)
        mainWindow.setWindowTitle('EchoSync Project')
        mainWindow.setToolTip(str())
        mainWindow.setToolTipDuration(0)
        mainWindow.setStatusTip(str())
        mainWindow.setWhatsThis(str())
        mainWindow.setAccessibleName(str())
        mainWindow.setAccessibleDescription(str())
        mainWindow.setStyleSheet('background-color: #1e1f22;')
        mainWindow.setLocale(QtCore.QLocale(QtCore.QLocale.Language.English, QtCore.QLocale.Country.UnitedStates))
        mainWindow.setWindowFilePath(str())
        mainWindow.setIconSize(QtCore.QSize(64, 64))
        self.urlListInputWindow = QtWidgets.QWidget(parent=mainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.urlListInputWindow.sizePolicy().hasHeightForWidth())
        self.urlListInputWindow.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.urlListInputWindow.setFont(font)
        self.urlListInputWindow.setMouseTracking(True)
        self.urlListInputWindow.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.urlListInputWindow.setAcceptDrops(False)
        self.urlListInputWindow.setToolTip(str())
        self.urlListInputWindow.setStatusTip(str())
        self.urlListInputWindow.setWhatsThis(str())
        self.urlListInputWindow.setAccessibleName(str())
        self.urlListInputWindow.setAccessibleDescription(str())
        self.urlListInputWindow.setStyleSheet('background-color: #1e1f22;')
        self.urlListInputWindow.setObjectName('urlListInputWindow')
        self.background0 = QtWidgets.QLabel(parent=self.urlListInputWindow)
        self.background0.setGeometry(QtCore.QRect(-1, 0, 600, 500))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.background0.sizePolicy().hasHeightForWidth())
        self.background0.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.background0.setFont(font)
        self.background0.setMouseTracking(True)
        self.background0.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.background0.setAcceptDrops(True)
        self.background0.setToolTip(str())
        self.background0.setStatusTip(str())
        self.background0.setWhatsThis(str())
        self.background0.setAccessibleName(str())
        self.background0.setAccessibleDescription(str())
        self.background0.setStyleSheet('background-color: #1e1f22;')
        self.background0.setText(str())
        self.background0.setTextInteractionFlags(QtCore.Qt.TextInteractionFlag.NoTextInteraction)
        self.background0.setObjectName('background0')
        self.applicationName = QtWidgets.QLabel(parent=self.urlListInputWindow)
        self.applicationName.setGeometry(QtCore.QRect(0, 20, 600, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.applicationName.sizePolicy().hasHeightForWidth())
        self.applicationName.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily('Sitka Small')
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.applicationName.setFont(font)
        self.applicationName.setMouseTracking(True)
        self.applicationName.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.applicationName.setAcceptDrops(False)
        self.applicationName.setToolTip(str())
        self.applicationName.setStatusTip(str())
        self.applicationName.setWhatsThis(str())
        self.applicationName.setAccessibleName(str())
        self.applicationName.setAccessibleDescription(str())
        self.applicationName.setStyleSheet('font: bold 16pt \'Sitka Small\'; color: #ffffff;')
        self.applicationName.setText('EchoSync Project')
        self.applicationName.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.applicationName.setTextInteractionFlags(QtCore.Qt.TextInteractionFlag.NoTextInteraction)
        self.applicationName.setObjectName('applicationName')
        self.inputUrlList = QtWidgets.QTextEdit(parent=self.urlListInputWindow)
        self.inputUrlList.setGeometry(QtCore.QRect(60, 120, 480, 180))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.inputUrlList.sizePolicy().hasHeightForWidth())
        self.inputUrlList.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily('Cascadia Code')
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.inputUrlList.setFont(font)
        self.inputUrlList.setMouseTracking(True)
        self.inputUrlList.setFocusPolicy(QtCore.Qt.FocusPolicy.StrongFocus)
        self.inputUrlList.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.inputUrlList.setToolTip(str())
        self.inputUrlList.setStatusTip(str())
        self.inputUrlList.setWhatsThis(str())
        self.inputUrlList.setAccessibleName(str())
        self.inputUrlList.setAccessibleDescription(str())
        self.inputUrlList.setStyleSheet('font: 8pt \'Cascadia Code\'; color: #ffffff; background-color: rgba(255, 255, 255, 100); border-style: outset; border-width: 0px; border-radius: 6px;')
        self.inputUrlList.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.inputUrlList.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.inputUrlList.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.SizeAdjustPolicy.AdjustIgnored)
        self.inputUrlList.setDocumentTitle(str())
        self.inputUrlList.setUndoRedoEnabled(True)
        self.inputUrlList.setHtml('<!DOCTYPE HTML PUBLIC \'-//W3C//DTD HTML 4.0//EN\' \'http://www.w3.org/TR/REC-html40/strict.dtd\'>\n'
'<html><head><meta name=\'qrichtext\' content=\'1\' /><style type=\'text/css\'>\n'
'p, li { white-space: pre-wrap; }\n'
'</style></head><body style=\' font-family:\'Cascadia Code\'; font-size:8pt; font-weight:400; font-style:normal;\'>\n'
'<p style=\'-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\'><br /></p></body></html>')
        self.inputUrlList.setAcceptRichText(False)
        self.inputUrlList.setTextInteractionFlags(QtCore.Qt.TextInteractionFlag.TextEditorInteraction)
        self.inputUrlList.setPlaceholderText('https://www.example.com/music?id=0123456789')
        self.inputUrlList.setObjectName('inputUrlList')
        self.msgAskForUrls = QtWidgets.QLabel(parent=self.urlListInputWindow)
        self.msgAskForUrls.setGeometry(QtCore.QRect(0, 70, 600, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.msgAskForUrls.sizePolicy().hasHeightForWidth())
        self.msgAskForUrls.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily('Quicksand Medium')
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.msgAskForUrls.setFont(font)
        self.msgAskForUrls.setMouseTracking(True)
        self.msgAskForUrls.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.msgAskForUrls.setAcceptDrops(False)
        self.msgAskForUrls.setToolTip(str())
        self.msgAskForUrls.setStatusTip(str())
        self.msgAskForUrls.setWhatsThis(str())
        self.msgAskForUrls.setAccessibleName(str())
        self.msgAskForUrls.setAccessibleDescription(str())
        self.msgAskForUrls.setStyleSheet('font: 10pt \'Quicksand Medium\';')
        self.msgAskForUrls.setText('<html><head/><body><p align=\'center\'><span style=\' font-size:10pt; color:#ffffff;\'>Enter the URLs of the songs you want to download (one url per line)</span></p></body></html>')
        self.msgAskForUrls.setTextInteractionFlags(QtCore.Qt.TextInteractionFlag.NoTextInteraction)
        self.msgAskForUrls.setObjectName('msgAskForUrls')
        self.btnNext = QtWidgets.QPushButton(parent=self.urlListInputWindow)
        self.btnNext.setGeometry(QtCore.QRect(218, 340, 160, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btnNext.sizePolicy().hasHeightForWidth())
        self.btnNext.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily('Quicksand Medium')
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.btnNext.setFont(font)
        self.btnNext.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.btnNext.setMouseTracking(True)
        self.btnNext.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.btnNext.setToolTip(str())
        self.btnNext.setStatusTip(str())
        self.btnNext.setWhatsThis(str())
        self.btnNext.setAccessibleName(str())
        self.btnNext.setAccessibleDescription(str())
        self.btnNext.setStyleSheet('QPushButton {font: bold 10pt \'Quicksand Medium\'; color: rgb(255, 255, 255); background-color: rgba(4, 201, 149, 200); border-color: rgba(4, 201, 149, 200); border-style: outset; border-width: 1px; border-radius: 5px;} QPushButton:hover {font: bold 10pt \'Quicksand Medium\'; color: rgb(255, 255, 255); background-color: rgba(4, 201, 149, 200); border-color: rgba(4, 201, 149, 200); border-style: inset; border-width: 1px; border-radius: 5px;}')
        self.btnNext.setText('NEXT')
        self.btnNext.setShortcut(str())
        self.btnNext.setObjectName('btnNext')
        self.settingsInputWindow = QtWidgets.QWidget(parent=self.urlListInputWindow)
        self.settingsInputWindow.setGeometry(QtCore.QRect(-1, 0, 610, 410))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.settingsInputWindow.sizePolicy().hasHeightForWidth())
        self.settingsInputWindow.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.settingsInputWindow.setFont(font)
        self.settingsInputWindow.setMouseTracking(True)
        self.settingsInputWindow.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.settingsInputWindow.setToolTip(str())
        self.settingsInputWindow.setStatusTip(str())
        self.settingsInputWindow.setWhatsThis(str())
        self.settingsInputWindow.setAccessibleName(str())
        self.settingsInputWindow.setAccessibleDescription(str())
        self.settingsInputWindow.setStyleSheet('background-color: #1e1f22;')
        self.settingsInputWindow.setObjectName('settingsInputWindow')
        self.settingsTitle = QtWidgets.QLabel(parent=self.settingsInputWindow)
        self.settingsTitle.setGeometry(QtCore.QRect(0, 20, 600, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.settingsTitle.sizePolicy().hasHeightForWidth())
        self.settingsTitle.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily('Sitka Small')
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.settingsTitle.setFont(font)
        self.settingsTitle.setMouseTracking(True)
        self.settingsTitle.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.settingsTitle.setAcceptDrops(False)
        self.settingsTitle.setToolTip(str())
        self.settingsTitle.setStatusTip(str())
        self.settingsTitle.setWhatsThis(str())
        self.settingsTitle.setAccessibleName(str())
        self.settingsTitle.setAccessibleDescription(str())
        self.settingsTitle.setStyleSheet('font: bold 14pt \'Sitka Small\'; color: #ffffff;')
        self.settingsTitle.setText('Download settings')
        self.settingsTitle.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.settingsTitle.setTextInteractionFlags(QtCore.Qt.TextInteractionFlag.NoTextInteraction)
        self.settingsTitle.setObjectName('settingsTitle')
        self.msgCodec = QtWidgets.QLabel(parent=self.settingsInputWindow)
        self.msgCodec.setGeometry(QtCore.QRect(120, 115, 270, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.msgCodec.sizePolicy().hasHeightForWidth())
        self.msgCodec.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily('Quicksand Mediuml')
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.msgCodec.setFont(font)
        self.msgCodec.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.msgCodec.setMouseTracking(True)
        self.msgCodec.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.msgCodec.setAcceptDrops(False)
        self.msgCodec.setToolTip(str())
        self.msgCodec.setStatusTip(str())
        self.msgCodec.setWhatsThis(str())
        self.msgCodec.setAccessibleName(str())
        self.msgCodec.setAccessibleDescription(str())
        self.msgCodec.setStyleSheet('font: 10pt \'Quicksand Mediuml\'; color: #ffffff;')
        self.msgCodec.setText('Audio codec                                            →')
        self.msgCodec.setTextInteractionFlags(QtCore.Qt.TextInteractionFlag.NoTextInteraction)
        self.msgCodec.setObjectName('msgCodec')
        self.msgTabFile = QtWidgets.QLabel(parent=self.settingsInputWindow)
        self.msgTabFile.setGeometry(QtCore.QRect(100, 85, 50, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.msgTabFile.sizePolicy().hasHeightForWidth())
        self.msgTabFile.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily('Quicksand Mediuml')
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.msgTabFile.setFont(font)
        self.msgTabFile.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.msgTabFile.setMouseTracking(True)
        self.msgTabFile.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.msgTabFile.setAcceptDrops(False)
        self.msgTabFile.setToolTip(str())
        self.msgTabFile.setStatusTip(str())
        self.msgTabFile.setWhatsThis(str())
        self.msgTabFile.setAccessibleName(str())
        self.msgTabFile.setAccessibleDescription(str())
        self.msgTabFile.setStyleSheet('font: bold 10.5pt \'Quicksand Mediuml\'; color: #ffffff;')
        self.msgTabFile.setText('Audio')
        self.msgTabFile.setTextInteractionFlags(QtCore.Qt.TextInteractionFlag.NoTextInteraction)
        self.msgTabFile.setObjectName('msgTabFile')
        self.listCodecType = QtWidgets.QComboBox(parent=self.settingsInputWindow)
        self.listCodecType.setGeometry(QtCore.QRect(400, 120, 80, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.listCodecType.sizePolicy().hasHeightForWidth())
        self.listCodecType.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily('Quicksand Mediuml')
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.listCodecType.setFont(font)
        self.listCodecType.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.listCodecType.setMouseTracking(True)
        self.listCodecType.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.listCodecType.setToolTip(str())
        self.listCodecType.setStatusTip(str())
        self.listCodecType.setWhatsThis(str())
        self.listCodecType.setAccessibleName(str())
        self.listCodecType.setAccessibleDescription(str())
        self.listCodecType.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.listCodecType.setStyleSheet('font: 10pt \'Quicksand Mediuml\'; color: #ffffff; background-color: rgba(245, 212, 176, 100); border-color: rgb(11, 32, 39); border-style: outset; border-width: 1px; border-radius: 4px;')
        self.listCodecType.setLocale(QtCore.QLocale(QtCore.QLocale.Language.English, QtCore.QLocale.Country.UnitedStates))
        self.listCodecType.setCurrentText('Opus')
        self.listCodecType.setMaxVisibleItems(11)
        self.listCodecType.setDuplicatesEnabled(False)
        self.listCodecType.setFrame(True)
        self.listCodecType.setObjectName('listCodecType')
        self.listCodecType.addItem(str())
        self.listCodecType.setItemText(0, 'Opus')
        self.msgTabMetadata = QtWidgets.QLabel(parent=self.settingsInputWindow)
        self.msgTabMetadata.setGeometry(QtCore.QRect(100, 190, 81, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.msgTabMetadata.sizePolicy().hasHeightForWidth())
        self.msgTabMetadata.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily('Quicksand Mediuml')
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.msgTabMetadata.setFont(font)
        self.msgTabMetadata.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.msgTabMetadata.setMouseTracking(True)
        self.msgTabMetadata.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.msgTabMetadata.setAcceptDrops(False)
        self.msgTabMetadata.setToolTip(str())
        self.msgTabMetadata.setStatusTip(str())
        self.msgTabMetadata.setWhatsThis(str())
        self.msgTabMetadata.setAccessibleName(str())
        self.msgTabMetadata.setAccessibleDescription(str())
        self.msgTabMetadata.setStyleSheet('font: bold 10.5pt \'Quicksand Mediuml\'; color: #ffffff;')
        self.msgTabMetadata.setText('Metadata')
        self.msgTabMetadata.setTextInteractionFlags(QtCore.Qt.TextInteractionFlag.NoTextInteraction)
        self.msgTabMetadata.setObjectName('msgTabMetadata')
        self.msgBitrate = QtWidgets.QLabel(parent=self.settingsInputWindow)
        self.msgBitrate.setGeometry(QtCore.QRect(120, 145, 270, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.msgBitrate.sizePolicy().hasHeightForWidth())
        self.msgBitrate.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily('Quicksand Mediuml')
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.msgBitrate.setFont(font)
        self.msgBitrate.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.msgBitrate.setMouseTracking(True)
        self.msgBitrate.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.msgBitrate.setAcceptDrops(False)
        self.msgBitrate.setToolTip(str())
        self.msgBitrate.setStatusTip(str())
        self.msgBitrate.setWhatsThis(str())
        self.msgBitrate.setAccessibleName(str())
        self.msgBitrate.setAccessibleDescription(str())
        self.msgBitrate.setStyleSheet('font: 10pt \'Quicksand Mediuml\'; color: #ffffff;')
        self.msgBitrate.setText('Audio bitrate (kbps)                                 →')
        self.msgBitrate.setTextInteractionFlags(QtCore.Qt.TextInteractionFlag.NoTextInteraction)
        self.msgBitrate.setObjectName('msgBitrate')
        self.listBitrateValue = QtWidgets.QComboBox(parent=self.settingsInputWindow)
        self.listBitrateValue.setGeometry(QtCore.QRect(400, 150, 80, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.listBitrateValue.sizePolicy().hasHeightForWidth())
        self.listBitrateValue.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily('Quicksand Mediuml')
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.listBitrateValue.setFont(font)
        self.listBitrateValue.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.listBitrateValue.setMouseTracking(True)
        self.listBitrateValue.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.listBitrateValue.setToolTip(str())
        self.listBitrateValue.setStatusTip(str())
        self.listBitrateValue.setWhatsThis(str())
        self.listBitrateValue.setAccessibleName(str())
        self.listBitrateValue.setAccessibleDescription(str())
        self.listBitrateValue.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.listBitrateValue.setStyleSheet('font: 10pt \'Quicksand Mediuml\'; color: #ffffff; background-color: rgba(245, 212, 176, 100); border-color: rgb(11, 32, 39); border-style: outset; border-width: 1px; border-radius: 4px;')
        self.listBitrateValue.setCurrentText('320')
        self.listBitrateValue.setMaxVisibleItems(11)
        self.listBitrateValue.setDuplicatesEnabled(False)
        self.listBitrateValue.setFrame(True)
        self.listBitrateValue.setObjectName('listBitrateValue')
        self.listBitrateValue.addItem(str())
        self.listBitrateValue.setItemText(0, '320')
        self.listBitrateValue.addItem(str())
        self.listBitrateValue.setItemText(1, '256')
        self.listBitrateValue.addItem(str())
        self.listBitrateValue.setItemText(2, '192')
        self.listBitrateValue.addItem(str())
        self.listBitrateValue.setItemText(3, '128')
        self.listBitrateValue.addItem(str())
        self.listBitrateValue.setItemText(4, '64')
        self.msgIncludeAllYTMetadata = QtWidgets.QLabel(parent=self.settingsInputWindow)
        self.msgIncludeAllYTMetadata.setGeometry(QtCore.QRect(120, 220, 270, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.msgIncludeAllYTMetadata.sizePolicy().hasHeightForWidth())
        self.msgIncludeAllYTMetadata.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily('Quicksand Mediuml')
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.msgIncludeAllYTMetadata.setFont(font)
        self.msgIncludeAllYTMetadata.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.msgIncludeAllYTMetadata.setMouseTracking(True)
        self.msgIncludeAllYTMetadata.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.msgIncludeAllYTMetadata.setAcceptDrops(False)
        self.msgIncludeAllYTMetadata.setToolTip(str())
        self.msgIncludeAllYTMetadata.setStatusTip(str())
        self.msgIncludeAllYTMetadata.setWhatsThis(str())
        self.msgIncludeAllYTMetadata.setAccessibleName(str())
        self.msgIncludeAllYTMetadata.setAccessibleDescription(str())
        self.msgIncludeAllYTMetadata.setStyleSheet('font: 10pt \'Quicksand Mediuml\'; color: #ffffff;')
        self.msgIncludeAllYTMetadata.setText('Include all metadata from YouTube           →')
        self.msgIncludeAllYTMetadata.setTextInteractionFlags(QtCore.Qt.TextInteractionFlag.NoTextInteraction)
        self.msgIncludeAllYTMetadata.setObjectName('msgIncludeAllYTMetadata')
        self.listIncludeAllYTMetadata = QtWidgets.QComboBox(parent=self.settingsInputWindow)
        self.listIncludeAllYTMetadata.setGeometry(QtCore.QRect(400, 225, 80, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.listIncludeAllYTMetadata.sizePolicy().hasHeightForWidth())
        self.listIncludeAllYTMetadata.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily('Quicksand Mediuml')
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.listIncludeAllYTMetadata.setFont(font)
        self.listIncludeAllYTMetadata.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.listIncludeAllYTMetadata.setMouseTracking(True)
        self.listIncludeAllYTMetadata.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.listIncludeAllYTMetadata.setToolTip(str())
        self.listIncludeAllYTMetadata.setStatusTip(str())
        self.listIncludeAllYTMetadata.setWhatsThis(str())
        self.listIncludeAllYTMetadata.setAccessibleName(str())
        self.listIncludeAllYTMetadata.setAccessibleDescription(str())
        self.listIncludeAllYTMetadata.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.listIncludeAllYTMetadata.setStyleSheet('font: 10pt \'Quicksand Mediuml\'; color: #ffffff; background-color: rgba(245, 212, 176, 100); border-color: rgb(11, 32, 39); border-style: outset; border-width: 1px; border-radius: 4px;')
        self.listIncludeAllYTMetadata.setCurrentText('Yes')
        self.listIncludeAllYTMetadata.setMaxVisibleItems(11)
        self.listIncludeAllYTMetadata.setDuplicatesEnabled(False)
        self.listIncludeAllYTMetadata.setFrame(True)
        self.listIncludeAllYTMetadata.setObjectName('listIncludeAllYTMetadata')
        self.listIncludeAllYTMetadata.addItem(str())
        self.listIncludeAllYTMetadata.setItemText(0, 'Yes')
        self.listIncludeAllYTMetadata.addItem(str())
        self.listIncludeAllYTMetadata.setItemText(1, 'No')
        self.btnDownload = QtWidgets.QPushButton(parent=self.settingsInputWindow)
        self.btnDownload.setGeometry(QtCore.QRect(210, 340, 160, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btnDownload.sizePolicy().hasHeightForWidth())
        self.btnDownload.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily('Quicksand Medium')
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.btnDownload.setFont(font)
        self.btnDownload.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.btnDownload.setMouseTracking(True)
        self.btnDownload.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.btnDownload.setToolTip(str())
        self.btnDownload.setStatusTip(str())
        self.btnDownload.setWhatsThis(str())
        self.btnDownload.setAccessibleName(str())
        self.btnDownload.setAccessibleDescription(str())
        self.btnDownload.setStyleSheet('QPushButton {font: bold 10pt \'Quicksand Medium\'; color: rgb(255, 255, 255); background-color: rgba(234, 118, 127, 200); border-color: rgba(234, 118, 127, 200); border-style: outset; border-width: 1px; border-radius: 5px;} QPushButton:hover {font: bold 10pt \'Quicksand Medium\'; color: rgb(255, 255, 255); background-color: rgba(234, 118, 127, 200); border-color: rgba(234, 118, 127, 200); border-style: inset; border-width: 1px; border-radius: 5px;}')
        self.btnDownload.setText('DOWNLOAD')
        self.btnDownload.setShortcut(str())
        self.btnDownload.setObjectName('btnDownload')
        self.downloadProgress = QtWidgets.QWidget(parent=self.urlListInputWindow)
        self.downloadProgress.setGeometry(QtCore.QRect(0, -1, 580, 540))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.downloadProgress.sizePolicy().hasHeightForWidth())
        self.downloadProgress.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.downloadProgress.setFont(font)
        self.downloadProgress.setMouseTracking(True)
        self.downloadProgress.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.downloadProgress.setToolTip(str())
        self.downloadProgress.setStatusTip(str())
        self.downloadProgress.setWhatsThis(str())
        self.downloadProgress.setAccessibleName(str())
        self.downloadProgress.setAccessibleDescription(str())
        self.downloadProgress.setStyleSheet('background-color: #1e1f22;')
        self.downloadProgress.setObjectName('downloadProgress')
        self.background1 = QtWidgets.QLabel(parent=self.downloadProgress)
        self.background1.setGeometry(QtCore.QRect(0, 0, 600, 410))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.background1.sizePolicy().hasHeightForWidth())
        self.background1.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.background1.setFont(font)
        self.background1.setMouseTracking(True)
        self.background1.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.background1.setAcceptDrops(True)
        self.background1.setToolTip(str())
        self.background1.setStatusTip(str())
        self.background1.setWhatsThis(str())
        self.background1.setAccessibleName(str())
        self.background1.setAccessibleDescription(str())
        self.background1.setStyleSheet('background-color: #1e1f22;')
        self.background1.setText(str())
        self.background1.setTextInteractionFlags(QtCore.Qt.TextInteractionFlag.NoTextInteraction)
        self.background1.setObjectName('background1')
        self.taskProgressTitle = QtWidgets.QLabel(parent=self.downloadProgress)
        self.taskProgressTitle.setGeometry(QtCore.QRect(0, 20, 600, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.taskProgressTitle.sizePolicy().hasHeightForWidth())
        self.taskProgressTitle.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily('Sitka Small')
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.taskProgressTitle.setFont(font)
        self.taskProgressTitle.setMouseTracking(True)
        self.taskProgressTitle.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.taskProgressTitle.setAcceptDrops(False)
        self.taskProgressTitle.setToolTip(str())
        self.taskProgressTitle.setStatusTip(str())
        self.taskProgressTitle.setWhatsThis(str())
        self.taskProgressTitle.setAccessibleName(str())
        self.taskProgressTitle.setAccessibleDescription(str())
        self.taskProgressTitle.setStyleSheet('font: bold 14pt \'Sitka Small\'; color: #ffffff;')
        self.taskProgressTitle.setText('Task progress')
        self.taskProgressTitle.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.taskProgressTitle.setTextInteractionFlags(QtCore.Qt.TextInteractionFlag.NoTextInteraction)
        self.taskProgressTitle.setObjectName('taskProgressTitle')
        self.msgSearchingURLsByTitle = QtWidgets.QLabel(parent=self.downloadProgress)
        self.msgSearchingURLsByTitle.setGeometry(QtCore.QRect(50, 140, 150, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.msgSearchingURLsByTitle.sizePolicy().hasHeightForWidth())
        self.msgSearchingURLsByTitle.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily('Quicksand Mediuml')
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.msgSearchingURLsByTitle.setFont(font)
        self.msgSearchingURLsByTitle.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.msgSearchingURLsByTitle.setMouseTracking(True)
        self.msgSearchingURLsByTitle.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.msgSearchingURLsByTitle.setAcceptDrops(False)
        self.msgSearchingURLsByTitle.setToolTip(str())
        self.msgSearchingURLsByTitle.setStatusTip(str())
        self.msgSearchingURLsByTitle.setWhatsThis(str())
        self.msgSearchingURLsByTitle.setAccessibleName(str())
        self.msgSearchingURLsByTitle.setAccessibleDescription(str())
        self.msgSearchingURLsByTitle.setStyleSheet('font: 10pt \'Quicksand Mediuml\'; color: #ffffff;')
        self.msgSearchingURLsByTitle.setText('Searching songs by title:')
        self.msgSearchingURLsByTitle.setTextInteractionFlags(QtCore.Qt.TextInteractionFlag.NoTextInteraction)
        self.msgSearchingURLsByTitle.setObjectName('msgSearchingURLsByTitle')
        self.msgSortingLinksStrings = QtWidgets.QLabel(parent=self.downloadProgress)
        self.msgSortingLinksStrings.setGeometry(QtCore.QRect(50, 100, 130, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.msgSortingLinksStrings.sizePolicy().hasHeightForWidth())
        self.msgSortingLinksStrings.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily('Quicksand Mediuml')
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.msgSortingLinksStrings.setFont(font)
        self.msgSortingLinksStrings.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.msgSortingLinksStrings.setMouseTracking(True)
        self.msgSortingLinksStrings.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.msgSortingLinksStrings.setAcceptDrops(False)
        self.msgSortingLinksStrings.setToolTip(str())
        self.msgSortingLinksStrings.setStatusTip(str())
        self.msgSortingLinksStrings.setWhatsThis(str())
        self.msgSortingLinksStrings.setAccessibleName(str())
        self.msgSortingLinksStrings.setAccessibleDescription(str())
        self.msgSortingLinksStrings.setStyleSheet('font: 10pt \'Quicksand Mediuml\'; color: #ffffff;')
        self.msgSortingLinksStrings.setText('Sorting links/strings:')
        self.msgSortingLinksStrings.setTextInteractionFlags(QtCore.Qt.TextInteractionFlag.NoTextInteraction)
        self.msgSortingLinksStrings.setObjectName('msgSortingLinksStrings')
        self.pbSortingLinks = QtWidgets.QProgressBar(parent=self.downloadProgress)
        self.pbSortingLinks.setGeometry(QtCore.QRect(220, 110, 330, 14))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pbSortingLinks.sizePolicy().hasHeightForWidth())
        self.pbSortingLinks.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily('Quicksand Mediuml')
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pbSortingLinks.setFont(font)
        self.pbSortingLinks.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.WaitCursor))
        self.pbSortingLinks.setMouseTracking(True)
        self.pbSortingLinks.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.pbSortingLinks.setToolTip(str())
        self.pbSortingLinks.setStatusTip(str())
        self.pbSortingLinks.setWhatsThis(str())
        self.pbSortingLinks.setAccessibleName(str())
        self.pbSortingLinks.setAccessibleDescription(str())
        self.pbSortingLinks.setStyleSheet('font:9pt \'Quicksand Mediuml\'; background-color: rgba(255, 255, 255, 200); border-color: rgba(0, 0, 0, 0); border-style: outset; border-width: 1px; border-radius: 4px;')
        self.pbSortingLinks.setProperty('value', 0)
        self.pbSortingLinks.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.pbSortingLinks.setFormat('%p%')
        self.pbSortingLinks.setObjectName('pbSortingLinks')
        self.pbSearchingURLsByTitle = QtWidgets.QProgressBar(parent=self.downloadProgress)
        self.pbSearchingURLsByTitle.setGeometry(QtCore.QRect(220, 150, 330, 14))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pbSearchingURLsByTitle.sizePolicy().hasHeightForWidth())
        self.pbSearchingURLsByTitle.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily('Quicksand Mediuml')
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.pbSearchingURLsByTitle.setFont(font)
        self.pbSearchingURLsByTitle.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.WaitCursor))
        self.pbSearchingURLsByTitle.setMouseTracking(True)
        self.pbSearchingURLsByTitle.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.pbSearchingURLsByTitle.setToolTip(str())
        self.pbSearchingURLsByTitle.setStatusTip(str())
        self.pbSearchingURLsByTitle.setWhatsThis(str())
        self.pbSearchingURLsByTitle.setAccessibleName(str())
        self.pbSearchingURLsByTitle.setAccessibleDescription(str())
        self.pbSearchingURLsByTitle.setStyleSheet('font:9pt \'Quicksand Mediuml\'; background-color: rgba(255, 255, 255, 200); border-color: rgba(0, 0, 0, 0); border-style: outset; border-width: 1px; border-radius: 4px;')
        self.pbSearchingURLsByTitle.setProperty('value', 0)
        self.pbSearchingURLsByTitle.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.pbSearchingURLsByTitle.setInvertedAppearance(False)
        self.pbSearchingURLsByTitle.setTextDirection(QtWidgets.QProgressBar.Direction.TopToBottom)
        self.pbSearchingURLsByTitle.setFormat('%p%')
        self.pbSearchingURLsByTitle.setObjectName('pbSearchingURLsByTitle')
        self.pbDownloadingSongsByUrl = QtWidgets.QProgressBar(parent=self.downloadProgress)
        self.pbDownloadingSongsByUrl.setGeometry(QtCore.QRect(220, 190, 330, 14))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pbDownloadingSongsByUrl.sizePolicy().hasHeightForWidth())
        self.pbDownloadingSongsByUrl.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily('Quicksand Mediuml')
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.pbDownloadingSongsByUrl.setFont(font)
        self.pbDownloadingSongsByUrl.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.WaitCursor))
        self.pbDownloadingSongsByUrl.setMouseTracking(True)
        self.pbDownloadingSongsByUrl.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.pbDownloadingSongsByUrl.setToolTip(str())
        self.pbDownloadingSongsByUrl.setStatusTip(str())
        self.pbDownloadingSongsByUrl.setWhatsThis(str())
        self.pbDownloadingSongsByUrl.setAccessibleName(str())
        self.pbDownloadingSongsByUrl.setAccessibleDescription(str())
        self.pbDownloadingSongsByUrl.setStyleSheet('font:9pt \'Quicksand Mediuml\'; background-color: rgba(255, 255, 255, 200); border-color: rgba(0, 0, 0, 0); border-style: outset; border-width: 1px; border-radius: 4px;')
        self.pbDownloadingSongsByUrl.setProperty('value', 0)
        self.pbDownloadingSongsByUrl.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.pbDownloadingSongsByUrl.setInvertedAppearance(False)
        self.pbDownloadingSongsByUrl.setTextDirection(QtWidgets.QProgressBar.Direction.TopToBottom)
        self.pbDownloadingSongsByUrl.setFormat('%p%')
        self.pbDownloadingSongsByUrl.setObjectName('pbDownloadingSongsByUrl')
        self.msgDownloadingSongsByUrl = QtWidgets.QLabel(parent=self.downloadProgress)
        self.msgDownloadingSongsByUrl.setGeometry(QtCore.QRect(50, 180, 160, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.msgDownloadingSongsByUrl.sizePolicy().hasHeightForWidth())
        self.msgDownloadingSongsByUrl.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily('Quicksand Mediuml')
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.msgDownloadingSongsByUrl.setFont(font)
        self.msgDownloadingSongsByUrl.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.msgDownloadingSongsByUrl.setMouseTracking(True)
        self.msgDownloadingSongsByUrl.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.msgDownloadingSongsByUrl.setAcceptDrops(False)
        self.msgDownloadingSongsByUrl.setToolTip(str())
        self.msgDownloadingSongsByUrl.setStatusTip(str())
        self.msgDownloadingSongsByUrl.setWhatsThis(str())
        self.msgDownloadingSongsByUrl.setAccessibleName(str())
        self.msgDownloadingSongsByUrl.setAccessibleDescription(str())
        self.msgDownloadingSongsByUrl.setStyleSheet('font: 10pt \'Quicksand Mediuml\'; color: #ffffff;')
        self.msgDownloadingSongsByUrl.setText('Downloading songs by url:')
        self.msgDownloadingSongsByUrl.setTextInteractionFlags(QtCore.Qt.TextInteractionFlag.NoTextInteraction)
        self.msgDownloadingSongsByUrl.setObjectName('msgDownloadingSongsByUrl')
        self.btnImportFromFile = QtWidgets.QPushButton(parent=self.urlListInputWindow)
        self.btnImportFromFile.setGeometry(QtCore.QRect(500, 260, 31, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btnImportFromFile.sizePolicy().hasHeightForWidth())
        self.btnImportFromFile.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily('Quicksand Medium')
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferAntialias)
        self.btnImportFromFile.setFont(font)
        self.btnImportFromFile.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.btnImportFromFile.setMouseTracking(True)
        self.btnImportFromFile.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.btnImportFromFile.setToolTip(str())
        self.btnImportFromFile.setStatusTip(str())
        self.btnImportFromFile.setWhatsThis(str())
        self.btnImportFromFile.setAccessibleName(str())
        self.btnImportFromFile.setAccessibleDescription(str())
        self.btnImportFromFile.setStyleSheet('background-color: rgba(68, 68, 69, 200); border-color: rgba(68, 68, 69, 200); border-style: outset; border-width: 1px; border-radius: 5px;')
        self.btnImportFromFile.setText(str())
        self.btnImportFromFile.setShortcut(str())
        self.btnImportFromFile.setObjectName('btnImportFromFile')
        self.settingsInputWindow.raise_()
        self.downloadProgress.raise_()
        self.background0.raise_()
        self.applicationName.raise_()
        self.inputUrlList.raise_()
        self.msgAskForUrls.raise_()
        self.btnNext.raise_()
        self.btnImportFromFile.raise_()
        mainWindow.setCentralWidget(self.urlListInputWindow)

        self.main(mainWindow)
        QtCore.QMetaObject.connectSlotsByName(mainWindow)

    def main(self, mainWindow) -> None:
        self.inputUrlList.setText('https://www.youtube.com/watch?v=SivKcsEDNNY')

        def import_queries_from_file() -> None:
            def set_ui_input_list(queries: list) -> None:
                existing_queries = set(query.strip() for query in self.inputUrlList.toPlainText().split('\n'))
                queries = '\n'.join(filter(None, set(existing_queries.union(map(str.strip, queries)))))
                self.inputUrlList.setText(queries)

            input_file_path = Path(QtWidgets.QFileDialog.getOpenFileName(mainWindow, 'Select a text file with the URLs/Queries', str(), 'Text and CSV files (*.txt *.csv)')[0]).absolute()

            if input_file_path.is_file():
                with open(input_file_path, 'r', encoding='utf-8') as fi:
                    queries = fi.readlines()

                queries = [query.strip() for query in queries]
                set_ui_input_list(queries)

        self.btnImportFromFile.clicked.connect(import_queries_from_file)

        def go_to_settings() -> None:
            if not self.inputUrlList.toPlainText().strip():
                self.inputUrlList.clear()
                self.inputUrlList.setFocus()
                return

            self.settingsInputWindow.show()
            self.settingsInputWindow.raise_()

        self.btnNext.clicked.connect(go_to_settings)

        def sort_links(query_list: list) -> dict:
            query_dict = {'links': list(), 'titles': list()}

            self.pbSortingLinks.setValue(0)
            for query in query_list:
                self.pbSortingLinks.setValue(int((query_list.index(query) + 1) / len(query_list) * 100))
                if query.startswith('http'):
                    query_dict['links'].append(query)
                else:
                    query_dict['titles'].append(query)

            self.pbSortingLinks.setValue(100)

            return query_dict

        def search_songs_by_title(query_dict: dict) -> list:
            url_query_list = list()

            self.pbSearchingURLsByTitle.setValue(0)

            for query in query_dict['titles']:
                query_url = str(SearchVideos(query, offset=1, mode='dict', max_results=1).result()['search_result'][0]['link'])
                url_query_list.append(query_url)
                self.pbSearchingURLsByTitle.setValue(int((query_dict['titles'].index(query) + 1) / len(query_dict['titles']) * 100))

            self.pbSearchingURLsByTitle.setValue(100)

            url_query_list.extend(query_dict['links'])
            return url_query_list

        def download_song(url_query_list: list, codec_type: str, bitrate_value: int, include_all_yt_metadata: str) -> None:
            self.pbDownloadingSongsByUrl.setValue(0)

            if include_all_yt_metadata.lower() == 'yes':
                include_all_yt_metadata = True
            else:
                include_all_yt_metadata = False

            def fix_title(title: str) -> str:
                normalized_title = normalize('NFKD', title).encode('ASCII', 'ignore').decode('utf-8')
                sanitized_title = sub(r'\s+', ' ', sub(r'[^a-zA-Z0-9\-_()[\]{}# ]', str(), normalized_title).strip())

                return sanitized_title

            ydl_opts_info = {
                'quiet': True,
                'no_warnings': True,
            }

            for url in url_query_list:
                song_info = YoutubeDL(ydl_opts_info).extract_info(url, download=False)
                output_file_path_wo_ext = Path(Path.cwd(), 'songs', fix_title(song_info['title']))

                ydl_opts_download = {
                    'format': 'bestaudio/best',
                    'outtmpl': f'{output_file_path_wo_ext}',
                    'quiet': True,
                    'no_warnings': True,
                    'nooverwrites': True,
                    'postprocessors': [
                        {
                            'key': 'FFmpegExtractAudio',
                            'preferredcodec': codec_type.lower(),
                            'preferredquality': str(bitrate_value),
                        }
                    ],
                }

                with YoutubeDL(ydl_opts_download) as ydl:
                    ydl.download([url])

                output_file_path = Path(f'{output_file_path_wo_ext}.{codec_type.lower()}').absolute()

                if include_all_yt_metadata:
                    artwork_url = f'http://img.youtube.com/vi/{song_info["id"]}'
                    sizes = ['maxresdefault', 'hq720', 'sddefault']
                    artwork_data = None

                    for size in sizes:
                        response = get(f'{artwork_url}/{size}.jpg', allow_redirects=True)
                        if response.status_code == 200:
                            artwork_data = bytes(response.content)
                            break

                    f = tag_load_file(output_file_path)
                    f['artwork'] = artwork_data
                    f['tracktitle'] = fix_title(song_info['title'])
                    f['artist'] = song_info['uploader']
                    f['year'] = song_info['upload_date'][:4]
                    f.save()

                self.pbDownloadingSongsByUrl.setValue(int((url_query_list.index(url) + 1) / len(url_query_list) * 100))

        def go_to_progress() -> None:
            self.downloadProgress.show()
            self.downloadProgress.raise_()

            self.pbSortingLinks.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.WaitCursor))
            query_dict = sort_links(self.inputUrlList.toPlainText().split('\n'))
            self.pbSortingLinks.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))

            self.pbSearchingURLsByTitle.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.WaitCursor))
            url_query_list = search_songs_by_title(query_dict)
            self.pbSearchingURLsByTitle.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))

            self.pbDownloadingSongsByUrl.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.WaitCursor))
            download_song(url_query_list, str(self.listCodecType.currentText()), int(self.listBitrateValue.currentText()), str(self.listIncludeAllYTMetadata.currentText()))
            self.pbDownloadingSongsByUrl.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))

        self.btnDownload.clicked.connect(go_to_progress)


if __name__ == '__main__':
    app = QtWidgets.QApplication(argv)
    mainWindow = QtWidgets.QMainWindow()
    ui = Ui_mainWindow()
    ui.setupUi(mainWindow)
    mainWindow.show()
    exit(app.exec())
